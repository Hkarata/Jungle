@rendermode InteractiveAuto
@implements IDisposable
@inject NavigationManager NavigationManager


<div id="Bar">

    <FluentBreadcrumb Style="font-family:Rubik-Light">
        <FluentBreadcrumbItem Href="/administration/dashboard" Style="font-family:Rubik-Light;font-weight:600">
            Administration
        </FluentBreadcrumbItem>
        <FluentBreadcrumbItem Href="/administration/tenants" Style="font-family:Rubik-Light;font-weight:600">
            Tenants
        </FluentBreadcrumbItem>

        @if (currentUrl == "administration/tenants/add-tenant")
        {
            <FluentBreadcrumbItem Href="/administration/tenants/add-tenant" Style="font-family:Rubik-Light;font-weight:600">Add tenant</FluentBreadcrumbItem>
        }
    </FluentBreadcrumb>

    <NavLink id="last" href="/administration/tenants/add-tenant" class="Rubik-Light">
        <FluentIcon Value="@(new Icons.Filled.Size20.GuestAdd())" Color="Color.Custom" CustomColor="#FFFFFF" />
        Add Tenant
    </NavLink>
    <FluentTooltip Anchor="last" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>I'm helping (quick)!</FluentTooltip>

</div>


<style>

    #last {
        margin-left: auto;
        font-weight: 600;
        background-color: cornflowerblue;
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s ease-in-out;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 8px;
        text-decoration: none;
    }

        #last:hover{
            box-shadow: 0 0 10px 0 rgba(0,0,0,0.1);
            transform: scale(1.03);
        }
</style>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}