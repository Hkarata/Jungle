@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Jungle.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div id="holder">
    <span id="welcome" class="Rubik-Regular">Welcome back</span>
    <span id="enter" class="Rubik-Light">Enter your email and password to access your account.</span>
    <br/>
    <br />
    <StatusMessage Message="@errorMessage" />
    <br />
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <div id="first">
                <label for="password" class="form-label">Password</label>
                <a class="links" href="Account/ForgotPassword">Forgot your password?</a>
            </div>
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="checkbox mb-3">
            <label class="form-label">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                Remember me
            </label>
        </div>
        <div id="second">
            <button type="submit" class="">
                <FluentIcon Value="@(new Icons.Filled.Size20.SignOut())" Color="Color.Custom" CustomColor="#FFFFFF" />
                Log in
            </button>
            <p>
                <a class="links" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
            </p>
        </div>
        <div>
            <p >
                <a class="links" href="Account/ResendEmailConfirmation">Resend email confirmation</a>
            </p>
        </div>
    </EditForm>
</div>

<style>
    .form-control {
        padding: 10px;
        font-size: 16px;
        border-top: none;
        border-left: none;
        border-right: none;
        border-bottom: 2px solid;
        font-family: Rubik-Light;
        font-weight: 600;
        outline: none;
        border-color: forestgreen;
        background-color: transparent;
    }

    .text-danger {
        color: red;
        font-family: Rubik-Regular;
        font-size: 14px;
        font-weight: 600;
    }

    .links {
        text-decoration: none;
        font-family: Rubik-Light;
        font-weight: 600;
        color: gray;
    }

        .links:hover{
            text-decoration: underline;
        }
</style>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
